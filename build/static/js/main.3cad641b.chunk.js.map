{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["product_data","require","App","props","addToCart","val","state","qty","setState","alert","jsonObj","manufacturers","specs","key","Brand","Model","Year","Object","keys","Specifications","map","intspecs","id","Price","this","parseData","height","width","src","Pics","alt","onClick","param","className","setHeader","loadContent","setFooter","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"g8CACMA,EAAeC,EAAQ,IA6FdC,E,YA1Fb,WAAYC,GACX,IAAD,8BACE,4CAAMA,KAyBRC,UAAY,SAACC,IAGA,GAARA,GAAa,EAAKC,MAAMC,IAAI,EAE7B,EAAKC,SAAS,CACdD,IAAK,EAAKD,MAAMC,IAAMF,IAItBI,MAAM,iDAlCR,EAAKH,MAAM,CACTC,IAAM,GAHV,E,uEAOUG,EAAQC,EAAcC,GAE9B,OAAOA,GAEL,IAAK,QACD,OAAQ,wBAAIC,IAAKD,GAAQA,EAAjB,MAA2BF,EAAQI,MAAMH,GAAeI,OACpE,IAAK,OACD,OAAQ,wBAAIF,IAAKD,GAAQA,EAAjB,MAA2BF,EAAQI,MAAMH,GAAeK,MACpE,IAAK,iBACD,OAAQ,4BAAI,4BAAKJ,EAAL,MAAJ,IAAwBK,OAAOC,KAAKR,EAAQI,MAAMH,GAAeQ,gBAAgBC,IAAI,SAAAC,GAAQ,OACnG,wBAAIR,IAAKQ,EAAUC,GAAID,GAAWA,EAAlC,MAA+CX,EAAQI,MAAMH,GAAeQ,eAAeE,OAE/F,IAAK,QACH,OAAO,wBAAIR,IAAKD,GAAQA,EAAjB,KAA0BF,EAAQI,MAAMH,GAAeY,OAClE,QACE,U,kCAmBJ,OACE,yBAAKD,GAAG,UACN,yBAAKA,GAAG,SAAR,uBACA,yBAAKA,GAAG,UAAR,SAAwBE,KAAKlB,MAAMC,Q,kCAOvC,OACE,yBAAKe,GAAG,UACN,yBAAKA,GAAG,WAAR,UACA,yBAAKA,GAAG,e,oCAMb,IAAD,OACE,OACA,yBAAKA,GAAG,WACLL,OAAOC,KAAKlB,EAAac,OAAOM,IAAI,SAAAT,GAAa,OAChD,yBAAKW,GAAG,WACN,4BACE,4BAAKX,EAAL,KACGM,OAAOC,KAAKlB,EAAac,MAAMH,IAAgBS,IAAI,SAAAR,GAAK,OACvD,yBAAKU,GAAIV,GAAQ,EAAKa,UAAUzB,EAAaW,EAAeC,OAGlE,6BAAK,yBAAKc,OAAO,QAAQC,MAAM,QAAQL,GAAG,OAAOM,IAAK5B,EAAac,MAAMH,GAAekB,KAAK,GAAIC,IAAKnB,IAAiB,yBAAKe,OAAO,QAAQC,MAAM,QAAQL,GAAG,OAAOM,IAAK5B,EAAac,MAAMH,GAAekB,KAAK,GAAIC,IAAKnB,KAAuB,6BAC/O,gCAAQ,4BAAQoB,QAAS,SAACC,GAAD,OAAW,EAAK5B,UAAU,KAA3C,eAAmE,4BAAQ2B,QAAS,SAACC,GAAD,OAAW,EAAK5B,WAAW,KAA5C,qBAAkF,mC,+BAQnK,OACE,yBAAK6B,UAAU,OACb,4BAAQX,GAAG,SAASE,KAAKU,aACzB,yBAAKZ,GAAG,SAASE,KAAKW,eACtB,4BAAQb,GAAG,SAASE,KAAKY,kB,GAvFfC,IAAMC,WCUJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.3cad641b.chunk.js","sourcesContent":["import React from 'react';\r\nconst product_data = require('./products.json');\r\nclass App extends React.Component\r\n{\r\n  constructor(props)\r\n  {\r\n    super(props);\r\n    this.state={\r\n      qty : 0\r\n    };\r\n    // this.AddToCart=this.AddToCart.bind(this);\r\n  }\r\n  parseData(jsonObj,manufacturers,specs)\r\n  {\r\n    switch(specs)\r\n    {\r\n      case \"Model\":\r\n          return (<li key={specs}>{specs} : {jsonObj.Brand[manufacturers].Model}</li>);\r\n      case \"Year\":\r\n          return (<li key={specs}>{specs} : {jsonObj.Brand[manufacturers].Year}</li>);\r\n      case \"Specifications\":\r\n          return (<ul><h4>{specs} :</h4> {Object.keys(jsonObj.Brand[manufacturers].Specifications).map(intspecs => (\r\n            <li key={intspecs} id={intspecs}>{intspecs} : {jsonObj.Brand[manufacturers].Specifications[intspecs]}</li>\r\n            ))}</ul>);\r\n        case \"Price\":\r\n          return(<li key={specs}>{specs}: {jsonObj.Brand[manufacturers].Price}</li>);\r\n      default:\r\n        return;\r\n    }\r\n  }\r\n\r\n  addToCart = (val) =>\r\n  {\r\n    // eslint-disable-next-line\r\n    if(val != -1 || this.state.qty>0)\r\n    {\r\n      this.setState({\r\n      qty: this.state.qty + val\r\n    });\r\n    }\r\n    else\r\n      alert(\"Cart is empty! Please add before removing...\");\r\n  }\r\n\r\n  setHeader()\r\n  {\r\n    return(\r\n      <div id=\"hinner\">\r\n        <div id=\"hleft\">Shopping Site Dummy</div>\r\n        <div id=\"hright\">Cart: {this.state.qty}</div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  setFooter()\r\n  {\r\n    return(\r\n      <div id=\"finner\">\r\n        <div id=\"address\">Footer</div>\r\n        <div id=\"support\"></div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  loadContent()\r\n  {\r\n    return(\r\n    <div id=\"content\">\r\n      {Object.keys(product_data.Brand).map(manufacturers => (\r\n        <div id=\"product\">\r\n          <ul>\r\n            <h1>{manufacturers}:</h1>\r\n              {Object.keys(product_data.Brand[manufacturers]).map(specs => (\r\n                <div id={specs}>{this.parseData(product_data,manufacturers, specs)}</div>\r\n              ))}\r\n          </ul>\r\n          <div><img height=\"600px\" width=\"550px\" id=\"Pics\" src={product_data.Brand[manufacturers].Pics[0]} alt={manufacturers} /><img height=\"500px\" width=\"450px\" id=\"Pics\" src={product_data.Brand[manufacturers].Pics[1]} alt={manufacturers} /></div><br />\r\n          <center><button onClick={(param) => this.addToCart(1)}>Add to Cart</button><button onClick={(param) => this.addToCart(-1)}>Remove from Cart</button></center><br />\r\n        </div>\r\n        ))}\r\n    </div>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header id=\"hroot\">{this.setHeader()}</header>\r\n        <div id=\"croot\">{this.loadContent()}</div>\r\n        <footer id=\"froot\">{this.setFooter()}</footer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}